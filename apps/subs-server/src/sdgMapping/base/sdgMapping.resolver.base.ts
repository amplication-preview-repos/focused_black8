/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { SdgMapping } from "./SdgMapping";
import { SdgMappingCountArgs } from "./SdgMappingCountArgs";
import { SdgMappingFindManyArgs } from "./SdgMappingFindManyArgs";
import { SdgMappingFindUniqueArgs } from "./SdgMappingFindUniqueArgs";
import { CreateSdgMappingArgs } from "./CreateSdgMappingArgs";
import { UpdateSdgMappingArgs } from "./UpdateSdgMappingArgs";
import { DeleteSdgMappingArgs } from "./DeleteSdgMappingArgs";
import { Business } from "../../business/base/Business";
import { SdgMappingService } from "../sdgMapping.service";
@graphql.Resolver(() => SdgMapping)
export class SdgMappingResolverBase {
  constructor(protected readonly service: SdgMappingService) {}

  async _sdgMappingsMeta(
    @graphql.Args() args: SdgMappingCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [SdgMapping])
  async sdgMappings(
    @graphql.Args() args: SdgMappingFindManyArgs
  ): Promise<SdgMapping[]> {
    return this.service.sdgMappings(args);
  }

  @graphql.Query(() => SdgMapping, { nullable: true })
  async sdgMapping(
    @graphql.Args() args: SdgMappingFindUniqueArgs
  ): Promise<SdgMapping | null> {
    const result = await this.service.sdgMapping(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => SdgMapping)
  async createSdgMapping(
    @graphql.Args() args: CreateSdgMappingArgs
  ): Promise<SdgMapping> {
    return await this.service.createSdgMapping({
      ...args,
      data: {
        ...args.data,

        business: args.data.business
          ? {
              connect: args.data.business,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => SdgMapping)
  async updateSdgMapping(
    @graphql.Args() args: UpdateSdgMappingArgs
  ): Promise<SdgMapping | null> {
    try {
      return await this.service.updateSdgMapping({
        ...args,
        data: {
          ...args.data,

          business: args.data.business
            ? {
                connect: args.data.business,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => SdgMapping)
  async deleteSdgMapping(
    @graphql.Args() args: DeleteSdgMappingArgs
  ): Promise<SdgMapping | null> {
    try {
      return await this.service.deleteSdgMapping(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Business, {
    nullable: true,
    name: "business",
  })
  async getBusiness(
    @graphql.Parent() parent: SdgMapping
  ): Promise<Business | null> {
    const result = await this.service.getBusiness(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}

/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { SdgMappingService } from "../sdgMapping.service";
import { SdgMappingCreateInput } from "./SdgMappingCreateInput";
import { SdgMapping } from "./SdgMapping";
import { SdgMappingFindManyArgs } from "./SdgMappingFindManyArgs";
import { SdgMappingWhereUniqueInput } from "./SdgMappingWhereUniqueInput";
import { SdgMappingUpdateInput } from "./SdgMappingUpdateInput";

export class SdgMappingControllerBase {
  constructor(protected readonly service: SdgMappingService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: SdgMapping })
  async createSdgMapping(
    @common.Body() data: SdgMappingCreateInput
  ): Promise<SdgMapping> {
    return await this.service.createSdgMapping({
      data: {
        ...data,

        business: data.business
          ? {
              connect: data.business,
            }
          : undefined,
      },
      select: {
        business: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        description: true,
        goalNumber: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [SdgMapping] })
  @ApiNestedQuery(SdgMappingFindManyArgs)
  async sdgMappings(@common.Req() request: Request): Promise<SdgMapping[]> {
    const args = plainToClass(SdgMappingFindManyArgs, request.query);
    return this.service.sdgMappings({
      ...args,
      select: {
        business: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        description: true,
        goalNumber: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: SdgMapping })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async sdgMapping(
    @common.Param() params: SdgMappingWhereUniqueInput
  ): Promise<SdgMapping | null> {
    const result = await this.service.sdgMapping({
      where: params,
      select: {
        business: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        description: true,
        goalNumber: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: SdgMapping })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateSdgMapping(
    @common.Param() params: SdgMappingWhereUniqueInput,
    @common.Body() data: SdgMappingUpdateInput
  ): Promise<SdgMapping | null> {
    try {
      return await this.service.updateSdgMapping({
        where: params,
        data: {
          ...data,

          business: data.business
            ? {
                connect: data.business,
              }
            : undefined,
        },
        select: {
          business: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          description: true,
          goalNumber: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: SdgMapping })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteSdgMapping(
    @common.Param() params: SdgMappingWhereUniqueInput
  ): Promise<SdgMapping | null> {
    try {
      return await this.service.deleteSdgMapping({
        where: params,
        select: {
          business: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          description: true,
          goalNumber: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}

/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { BusinessService } from "../business.service";
import { BusinessCreateInput } from "./BusinessCreateInput";
import { Business } from "./Business";
import { BusinessFindManyArgs } from "./BusinessFindManyArgs";
import { BusinessWhereUniqueInput } from "./BusinessWhereUniqueInput";
import { BusinessUpdateInput } from "./BusinessUpdateInput";
import { SdgMappingFindManyArgs } from "../../sdgMapping/base/SdgMappingFindManyArgs";
import { SdgMapping } from "../../sdgMapping/base/SdgMapping";
import { SdgMappingWhereUniqueInput } from "../../sdgMapping/base/SdgMappingWhereUniqueInput";
import { SurveyResponseFindManyArgs } from "../../surveyResponse/base/SurveyResponseFindManyArgs";
import { SurveyResponse } from "../../surveyResponse/base/SurveyResponse";
import { SurveyResponseWhereUniqueInput } from "../../surveyResponse/base/SurveyResponseWhereUniqueInput";

export class BusinessControllerBase {
  constructor(protected readonly service: BusinessService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Business })
  async createBusiness(
    @common.Body() data: BusinessCreateInput
  ): Promise<Business> {
    return await this.service.createBusiness({
      data: data,
      select: {
        createdAt: true,
        id: true,
        industry: true,
        mission: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Business] })
  @ApiNestedQuery(BusinessFindManyArgs)
  async businesses(@common.Req() request: Request): Promise<Business[]> {
    const args = plainToClass(BusinessFindManyArgs, request.query);
    return this.service.businesses({
      ...args,
      select: {
        createdAt: true,
        id: true,
        industry: true,
        mission: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Business })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async business(
    @common.Param() params: BusinessWhereUniqueInput
  ): Promise<Business | null> {
    const result = await this.service.business({
      where: params,
      select: {
        createdAt: true,
        id: true,
        industry: true,
        mission: true,
        name: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Business })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateBusiness(
    @common.Param() params: BusinessWhereUniqueInput,
    @common.Body() data: BusinessUpdateInput
  ): Promise<Business | null> {
    try {
      return await this.service.updateBusiness({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          industry: true,
          mission: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Business })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteBusiness(
    @common.Param() params: BusinessWhereUniqueInput
  ): Promise<Business | null> {
    try {
      return await this.service.deleteBusiness({
        where: params,
        select: {
          createdAt: true,
          id: true,
          industry: true,
          mission: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/sdgMappings")
  @ApiNestedQuery(SdgMappingFindManyArgs)
  async findSdgMappings(
    @common.Req() request: Request,
    @common.Param() params: BusinessWhereUniqueInput
  ): Promise<SdgMapping[]> {
    const query = plainToClass(SdgMappingFindManyArgs, request.query);
    const results = await this.service.findSdgMappings(params.id, {
      ...query,
      select: {
        business: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        description: true,
        goalNumber: true,
        id: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/sdgMappings")
  async connectSdgMappings(
    @common.Param() params: BusinessWhereUniqueInput,
    @common.Body() body: SdgMappingWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      sdgMappings: {
        connect: body,
      },
    };
    await this.service.updateBusiness({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/sdgMappings")
  async updateSdgMappings(
    @common.Param() params: BusinessWhereUniqueInput,
    @common.Body() body: SdgMappingWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      sdgMappings: {
        set: body,
      },
    };
    await this.service.updateBusiness({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/sdgMappings")
  async disconnectSdgMappings(
    @common.Param() params: BusinessWhereUniqueInput,
    @common.Body() body: SdgMappingWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      sdgMappings: {
        disconnect: body,
      },
    };
    await this.service.updateBusiness({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/surveyResponses")
  @ApiNestedQuery(SurveyResponseFindManyArgs)
  async findSurveyResponses(
    @common.Req() request: Request,
    @common.Param() params: BusinessWhereUniqueInput
  ): Promise<SurveyResponse[]> {
    const query = plainToClass(SurveyResponseFindManyArgs, request.query);
    const results = await this.service.findSurveyResponses(params.id, {
      ...query,
      select: {
        business: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        responseData: true,
        responseDate: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/surveyResponses")
  async connectSurveyResponses(
    @common.Param() params: BusinessWhereUniqueInput,
    @common.Body() body: SurveyResponseWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      surveyResponses: {
        connect: body,
      },
    };
    await this.service.updateBusiness({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/surveyResponses")
  async updateSurveyResponses(
    @common.Param() params: BusinessWhereUniqueInput,
    @common.Body() body: SurveyResponseWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      surveyResponses: {
        set: body,
      },
    };
    await this.service.updateBusiness({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/surveyResponses")
  async disconnectSurveyResponses(
    @common.Param() params: BusinessWhereUniqueInput,
    @common.Body() body: SurveyResponseWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      surveyResponses: {
        disconnect: body,
      },
    };
    await this.service.updateBusiness({
      where: params,
      data,
      select: { id: true },
    });
  }
}
